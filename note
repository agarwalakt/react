Reat native

index.js is the start of the project, first point of entry
app.js is the file we are trying to render, we update the file and then hit 'cmd R' to reload the ui.
react native under the hood alex kotliarskyi
cons-
pro- not web view, easy to wrap native component
react native group on fb
dev menu- cmd d on the app, perf monitor- js frame rate, views-2,
gpu overdraw to measure overdraw
use layout inspecor on android to check the layout and hirearchy
hirearchy viewer for xcode
use flatlist or section list instead of other views for better performance for a large list, wont make a big difference for a small list
going back and forth between the native and react real using the bridge will slow the app. minimize the movemement between realms to improve performance
useNativeDriver for declarative api to handle rendering
use tool to monitor the traffic over the bridge-snoopy
depending on the navigating framework used, accessibility will be enabled/broken, javascript based navigation framework for android would break accessiblity


add react library and react dom-which actually renders react to the dom
add babel which compiles the javascript (next gen javascript)

react returns jsx(almost like html looking)

uistate management is needed if you want dynamic elements, want to modify html elements, add and remove elements.
angular, vue and react do the same thing
you can build a single page web application and just keep changing the components and not have to go back to the server and re load the page
for multipage applicaions we call reactdom.render() for every component, where as for a single page app we call it once for the entire page.
react uses a lot of next gen java script.
use let(variables like var) and const(constants) instead of var
const functionName = (variables if any) =>{function body} this is equal to function something(){}

